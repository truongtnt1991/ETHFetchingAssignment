// <auto-generated />
using FetchData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FetchData.Migrations
{
    [DbContext(typeof(BlockContext))]
    partial class BlockContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FetchEntity.Entities.Block", b =>
                {
                    b.Property<int>("BlockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blockID");

                    b.Property<int>("BlockNumber")
                        .HasColumnType("int")
                        .HasColumnName("blockNumber");

                    b.Property<decimal>("BlockReward")
                        .HasColumnType("DECIMAL (50,0)")
                        .HasColumnName("blockReward");

                    b.Property<decimal>("GasLimit")
                        .HasColumnType("DECIMAL (50,0)")
                        .HasColumnName("gasLimit");

                    b.Property<decimal>("GasUsed")
                        .HasColumnType("DECIMAL (50,0)")
                        .HasColumnName("gasUsed");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("VARCHAR (66)")
                        .HasColumnName("hash");

                    b.Property<string>("Miner")
                        .IsRequired()
                        .HasColumnType("VARCHAR (42)")
                        .HasColumnName("miner");

                    b.Property<string>("ParentHash")
                        .IsRequired()
                        .HasColumnType("VARCHAR (66)")
                        .HasColumnName("parentHash");

                    b.HasKey("BlockID");

                    b.ToTable("blocks", (string)null);
                });

            modelBuilder.Entity("FetchEntity.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transactionID");

                    b.Property<int>("BlockID")
                        .HasColumnType("int")
                        .HasColumnName("blockID");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("VARCHAR (42)")
                        .HasColumnName("from");

                    b.Property<decimal>("Gas")
                        .HasColumnType("DECIMAL (50,0)")
                        .HasColumnName("gas");

                    b.Property<decimal>("GasPrice")
                        .HasColumnType("DECIMAL (50,0)")
                        .HasColumnName("gasPrice");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("VARCHAR (66)")
                        .HasColumnName("hash");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("VARCHAR (42)")
                        .HasColumnName("to");

                    b.Property<int>("TransactionIndex")
                        .HasColumnType("int")
                        .HasColumnName("transactionIndex");

                    b.Property<decimal>("Value")
                        .HasColumnType("DECIMAL (50,0)")
                        .HasColumnName("value");

                    b.HasKey("TransactionID");

                    b.HasIndex("BlockID");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("FetchEntity.Entities.Transaction", b =>
                {
                    b.HasOne("FetchEntity.Entities.Block", "Block")
                        .WithMany()
                        .HasForeignKey("BlockID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });
#pragma warning restore 612, 618
        }
    }
}
